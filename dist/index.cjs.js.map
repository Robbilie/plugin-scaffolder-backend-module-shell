{"version":3,"file":"index.cjs.js","sources":["../src/actions/shell.ts"],"sourcesContent":["import { createTemplateAction, executeShellCommand } from '@backstage/plugin-scaffolder-backend';\nimport path from 'path';\nimport { Config } from '@backstage/config';\nimport {InputError} from \"@backstage/errors\";\n\nexport const shellAction = (options: { config?: Config, allowedTemplateLocations?: string[] }) => {\n    return createTemplateAction<{ command: string; workingDirectory: string, args: string[] }>({\n        id: 'shell',\n        schema: {\n            input: {\n                required: ['command'],\n                type: 'object',\n                properties: {\n                    command: {\n                        type: 'string',\n                        title: 'Command',\n                        description: 'The command to run',\n                    },\n                    workingDirectory: {\n                        type: 'string',\n                        title: 'Working Directory',\n                        description: 'Working directory within the scaffolder workspace to execute the command in'\n                    },\n                    args: {\n                        type: 'array',\n                        items: {\n                            type: 'string',\n                        },\n                        title: 'Arguments to pass to the command'\n                    }\n                },\n            },\n        },\n        async handler(ctx) {\n            if (options.allowedTemplateLocations && ctx.templateInfo?.baseUrl && !options.allowedTemplateLocations.includes(ctx.templateInfo?.baseUrl)) {\n                throw new InputError(\n                    `Base URL ${ctx.templateInfo?.baseUrl} not allowed`,\n                );\n            }\n\n            await executeShellCommand({\n                command: ctx.input.command,\n                args: ctx.input.args,\n                logStream: ctx.logStream,\n                options: {\n                    env: process.env,\n                    cwd: path.resolve(ctx.workspacePath, ctx.input.workingDirectory || '.')\n                }\n            });\n\n            ctx.logger.info(`Finished executing ${ctx.input.command}`);\n        },\n    });\n};\n"],"names":["createTemplateAction","InputError","executeShellCommand","path"],"mappings":";;;;;;;;;;;;AAKa,MAAA,WAAA,GAAc,CAAC,OAAsE,KAAA;AAC9F,EAAA,OAAOA,4CAAoF,CAAA;AAAA,IACvF,EAAI,EAAA,OAAA;AAAA,IACJ,MAAQ,EAAA;AAAA,MACJ,KAAO,EAAA;AAAA,QACH,QAAA,EAAU,CAAC,SAAS,CAAA;AAAA,QACpB,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACR,OAAS,EAAA;AAAA,YACL,IAAM,EAAA,QAAA;AAAA,YACN,KAAO,EAAA,SAAA;AAAA,YACP,WAAa,EAAA,oBAAA;AAAA,WACjB;AAAA,UACA,gBAAkB,EAAA;AAAA,YACd,IAAM,EAAA,QAAA;AAAA,YACN,KAAO,EAAA,mBAAA;AAAA,YACP,WAAa,EAAA,6EAAA;AAAA,WACjB;AAAA,UACA,IAAM,EAAA;AAAA,YACF,IAAM,EAAA,OAAA;AAAA,YACN,KAAO,EAAA;AAAA,cACH,IAAM,EAAA,QAAA;AAAA,aACV;AAAA,YACA,KAAO,EAAA,kCAAA;AAAA,WACX;AAAA,SACJ;AAAA,OACJ;AAAA,KACJ;AAAA,IACA,MAAM,QAAQ,GAAK,EAAA;AAjC3B,MAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AAkCY,MAAA,IAAI,OAAQ,CAAA,wBAAA,KAAA,CAA4B,EAAI,GAAA,GAAA,CAAA,YAAA,KAAJ,mBAAkB,OAAW,CAAA,IAAA,CAAC,OAAQ,CAAA,wBAAA,CAAyB,QAAS,CAAA,CAAA,EAAA,GAAA,GAAA,CAAI,YAAJ,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAkB,OAAO,CAAG,EAAA;AACxI,QAAA,MAAM,IAAIC,iBAAA;AAAA,UACN,CAAA,SAAA,EAAA,CAAY,EAAI,GAAA,GAAA,CAAA,YAAA,KAAJ,IAAkB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAA,CAAA,YAAA,CAAA;AAAA,SAClC,CAAA;AAAA,OACJ;AAEA,MAAA,MAAMC,2CAAoB,CAAA;AAAA,QACtB,OAAA,EAAS,IAAI,KAAM,CAAA,OAAA;AAAA,QACnB,IAAA,EAAM,IAAI,KAAM,CAAA,IAAA;AAAA,QAChB,WAAW,GAAI,CAAA,SAAA;AAAA,QACf,OAAS,EAAA;AAAA,UACL,KAAK,OAAQ,CAAA,GAAA;AAAA,UACb,GAAA,EAAKC,yBAAK,OAAQ,CAAA,GAAA,CAAI,eAAe,GAAI,CAAA,KAAA,CAAM,oBAAoB,GAAG,CAAA;AAAA,SAC1E;AAAA,OACH,CAAA,CAAA;AAED,MAAA,GAAA,CAAI,MAAO,CAAA,IAAA,CAAK,CAAsB,mBAAA,EAAA,GAAA,CAAI,MAAM,OAAS,CAAA,CAAA,CAAA,CAAA;AAAA,KAC7D;AAAA,GACH,CAAA,CAAA;AACL;;;;"}